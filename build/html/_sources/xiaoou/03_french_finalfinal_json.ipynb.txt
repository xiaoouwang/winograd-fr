{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Towards a full version of french wino (final steps)\n",
    "\n",
    "## Why\n",
    "\n",
    "To make data really comprehensible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:33:14.266938Z",
     "start_time": "2021-03-11T17:33:14.261853Z"
    }
   },
   "outputs": [],
   "source": [
    "import os,sys,inspect\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import importlib\n",
    "import sys\n",
    "from utils_xo import *\n",
    "importlib.reload(sys.modules[\"utils_xo\"])\n",
    "from utils_xo import *\n",
    "pd.set_option('display.max_colwidth', None)\n",
    "# set data directory\n",
    "data_dir = r\"../../../data/french/\"\n",
    "import xml.etree.ElementTree as ET\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:33:14.697598Z",
     "start_time": "2021-03-11T17:33:14.691224Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "tree = ET.parse(data_dir + 'winograd_fr_v2.xml')\n",
    "root = tree.getroot()\n",
    "\n",
    "#* get id and schema for no 9999 items\n",
    "ids = []\n",
    "french_schema_ids = []\n",
    "for schema in root.findall(\"./\"):\n",
    "    if schema.attrib['engn'] != \"9999\":\n",
    "        ids.append(int(schema.attrib['engn']))\n",
    "        french_schema_ids.append(int(schema.attrib['id']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:33:16.509129Z",
     "start_time": "2021-03-11T17:33:16.506084Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#* make ids and french schema ids twice longer\n",
    "double_ids = []\n",
    "double_french_schema_ids = []\n",
    "for id in ids:\n",
    "    double_ids.append(id)\n",
    "    double_ids.append(id+1)\n",
    "for fr in french_schema_ids:\n",
    "    double_french_schema_ids.append(fr)\n",
    "    double_french_schema_ids.append(fr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:33:16.924061Z",
     "start_time": "2021-03-11T17:33:16.921403Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "202 items in french\n"
     ]
    }
   ],
   "source": [
    "print(f'{len(double_ids)} items in french')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:34:50.999356Z",
     "start_time": "2021-03-11T17:34:50.993946Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#* add text and hypothesis: [texte] il mange trop -> [hypothese] il mange pas peu\n",
    "\n",
    "#[ gather texts\n",
    "items_a = []\n",
    "items_b = []\n",
    "\n",
    "for schema in root.findall(\"schema\"):\n",
    "    if schema.attrib['engn'] != \"9999\":\n",
    "        text_debut = schema.find(\".//txt1\").text.lstrip()\n",
    "        text_middle = schema.find(\".//wordA\").text\n",
    "        text_end = schema.find(\".//txt2\").text\n",
    "        item_a = text_debut + text_middle + text_end\n",
    "        text_debut = schema.find(\".//txt1\").text.lstrip()\n",
    "        text_middle = schema.find(\".//wordB\").text\n",
    "        text_end = schema.find(\".//txt2\").text\n",
    "        item_b = text_debut + text_middle +  text_end\n",
    "        items_a.append(item_a)\n",
    "        items_b.append(item_b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:34:57.102410Z",
     "start_time": "2021-03-11T17:34:57.099613Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "items = []\n",
    "for x,y in zip(items_a,items_b):\n",
    "    items.append(x)\n",
    "    items.append(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:35:17.087202Z",
     "start_time": "2021-03-11T17:35:17.076643Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "101\n",
      "101\n",
      "101\n",
      "101\n"
     ]
    }
   ],
   "source": [
    "#* add questions and answers, questiona should be followed by question b in the final list, the same for answers, the incorrect answer is the i in answerb or a\n",
    "questions_a = []\n",
    "questions_b = []\n",
    "answers_a = []\n",
    "answers_b = []\n",
    "for schema in root.findall(\"schema\"):\n",
    "    if schema.attrib['engn'] != \"9999\":\n",
    "        text_debut = schema.find(\".//qn1\").text\n",
    "        text_middle = schema.find(\".//qwordA\").text\n",
    "        text_end = schema.find(\".//qn2\").text\n",
    "        # print(text_debut,text_middle,text_end)\n",
    "        if not text_middle:\n",
    "            text_middle = \"\"\n",
    "        if not text_debut:\n",
    "            text_debut = \"\"\n",
    "        question_a = text_debut + text_middle + text_end\n",
    "        text_debut = schema.find(\".//qn1\").text\n",
    "        text_middle = schema.find(\".//qwordB\").text\n",
    "        text_end = schema.find(\".//qn2\").text\n",
    "        if not text_middle:\n",
    "            text_middle = \"\"\n",
    "        if not text_debut:\n",
    "            text_debut = \"\"\n",
    "        question_b = text_debut + text_middle +  text_end\n",
    "        # print(text_debut,text_middle,text_end)\n",
    "        answer_a = schema.find(\".//answer1\").text\n",
    "        # print(answer_a)\n",
    "        answer_b = schema.find(\".//answer2\").text\n",
    "        # print(answer_b)\n",
    "        questions_a.append(question_a)\n",
    "        questions_b.append(question_b)\n",
    "        answers_a.append(answer_a)\n",
    "        answers_b.append(answer_b)\n",
    "print(len(questions_a))\n",
    "print(len(questions_b))\n",
    "print(len(answers_a))\n",
    "print(len(answers_b))\n",
    "# 214\n",
    "# clean the text\n",
    "for ls in [answers_a,answers_b,questions_a,questions_b]:\n",
    "    for i,text in enumerate(ls):\n",
    "        ls[i] = text.strip().replace(\"  \",\" \").replace(\"   \",\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:35:37.127342Z",
     "start_time": "2021-03-11T17:35:37.123830Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#[ make question list and answer list\n",
    "questions = []\n",
    "answers = []\n",
    "for a,b in zip(questions_a,questions_b):\n",
    "    questions.append(a)\n",
    "    questions.append(b)\n",
    "for c,d in zip(answers_a,answers_b):\n",
    "    answers.append(c)\n",
    "    answers.append(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:35:38.419079Z",
     "start_time": "2021-03-11T17:35:38.416250Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#! add the wrong answer\n",
    "#[ gather wrong answers\n",
    "wrong_answers = []\n",
    "for x,y in zip(answers_b,answers_a):\n",
    "    wrong_answers.append(x)\n",
    "    wrong_answers.append(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:35:55.934487Z",
     "start_time": "2021-03-11T17:35:55.919223Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "202\n",
      "202\n",
      "la coupe grand\n",
      "<mask> grand\n",
      "la valise petit\n",
      "<mask> petit\n",
      "Paul n'a pas réussi\n",
      "<mask> n'a pas réussi\n",
      "Georges n'a pas répondu\n",
      "<mask> n'a pas répondu\n",
      "l'avocat répéter\n",
      "<mask> répéter\n",
      "le témoin répondre à\n",
      "<mask> répondre à\n",
      "Nicolas faible\n",
      "<mask> faible\n",
      "son fils lourd\n",
      "<mask> lourd\n",
      "les lycéens puni\n",
      "<mask> puni\n",
      "les collégiens défendu\n",
      "<mask> défendu\n",
      "la carafe vide\n",
      "<mask> vide\n",
      "la tasse plein\n",
      "<mask> plein\n",
      "Bernard généreux\n",
      "<mask> généreux\n",
      "Charles reconnaissant\n",
      "<mask> reconnaissant\n",
      "Bernard blessé\n",
      "<mask> blessé\n",
      "Charles ingrat\n",
      "<mask> ingrat\n",
      "l'escroc gagner\n",
      "<mask> gagner\n",
      "Samuel perdre\n",
      "<mask> perdre\n",
      "le poisson affamé\n",
      "<mask> affamé\n",
      "le ver délicieux\n",
      "<mask> délicieux\n",
      "l'arbre déplacer\n",
      "<mask> déplacer\n",
      "le toit réparer\n",
      "<mask> réparer\n",
      "son ancienne maison déménager de\n",
      "<mask> déménager de\n",
      "sa nouvelle maison emménager dans\n",
      "<mask> emménager dans\n",
      "les gens enthousiaste\n",
      "<mask> enthousiaste\n",
      "les livres de Paul populaire\n",
      "<mask> populaire\n",
      "Claire déçue\n",
      "<mask> déçue\n",
      "Sylvie sortie\n",
      "<mask> sortie\n",
      "Claire dehors\n",
      "<mask> dehors\n",
      "Sylvie à l'intérieur\n",
      "<mask> à l'intérieur\n",
      "Simon voulait\n",
      "<mask> voulait\n",
      "Adam savait\n",
      "<mask> savait\n",
      "le chemin emprunter\n",
      "<mask> emprunter\n",
      "le lac atteindre\n",
      "<mask> atteindre\n",
      "dans le lac plus sûr\n",
      "<mask> plus sûr\n",
      "dans la mer dangereux\n",
      "<mask> dangereux\n",
      "Fred et Alice préparés\n",
      "<mask> préparés\n",
      "les manteaux suffisants\n",
      "<mask> suffisants\n",
      "Dupont sur la route\n",
      "<mask> sur la route\n",
      "Dubois mort\n",
      "<mask> mort\n",
      "Henry tard\n",
      "<mask> tard\n",
      "Arnault tôt\n",
      "<mask> tôt\n",
      "la planche épais\n",
      "<mask> épais\n",
      "la scie petit\n",
      "<mask> petit\n",
      "les renards tuer\n",
      "<mask> tuer\n",
      "les poules protéger\n",
      "<mask> protéger\n",
      "Fred s'est levé\n",
      "<mask> s'est levé\n",
      "Georges est revenu\n",
      "<mask> est revenu\n",
      "Fred est\n",
      "<mask> est\n",
      "mon arrière grand-père était\n",
      "<mask> était\n",
      "Fred ans\n",
      "<mask> ans\n",
      "mon père mois\n",
      "<mask> mois\n",
      "Yakoutsk gagné\n",
      "<mask> gagné\n",
      "le Kamchatka perdu\n",
      "<mask> perdu\n",
      "les archéologues des indices\n",
      "<mask> des indices\n",
      "les hommes préhistoriques du gibier\n",
      "<mask> du gibier\n",
      "la police de stopper\n",
      "<mask> de stopper\n",
      "le gang d'organiser\n",
      "<mask> d'organiser\n",
      "dans le gâteau sucre\n",
      "<mask> sucre\n",
      "dans le frigo restes\n",
      "<mask> restes\n",
      "les chevilles guéries\n",
      "<mask> guéries\n",
      "les béquilles superflues\n",
      "<mask> superflues\n",
      "les partisans minorité\n",
      "<mask> minorité\n",
      "les opposants majorité\n",
      "<mask> majorité\n",
      "des biscuits à l'avoine plus\n",
      "<mask> plus\n",
      "des biscuits au chocolat moins\n",
      "<mask> moins\n",
      "le stylo de café\n",
      "<mask> de café\n",
      "le café d'encre\n",
      "<mask> d'encre\n",
      "Stéphane admire\n",
      "<mask> admire\n",
      "Fred influence\n",
      "<mask> influence\n",
      "la table large\n",
      "<mask> large\n",
      "la porte étroite\n",
      "<mask> étroite\n",
      "Jean  est parti ?\n",
      "<mask>  est parti ?\n",
      "Benoît  est parti ?\n",
      "<mask>  est parti ?\n",
      "Claire eu de réponse\n",
      "<mask> eu de réponse\n",
      "Sylvie répondu\n",
      "<mask> répondu\n",
      "Joël reçu\n",
      "<mask> reçu\n",
      "le détective livré\n",
      "<mask> livré\n",
      "de Gérard La pinte vide\n",
      "<mask> La pinte vide\n",
      "du barman la clé des toilettes\n",
      "<mask> la clé des toilettes\n",
      "Thomas conduire tout seul\n",
      "<mask> conduire tout seul\n",
      "Raphaël marcher\n",
      "<mask> marcher\n",
      "Benoît n'avait pas\n",
      "<mask> n'avait pas\n",
      "Jean avait\n",
      "<mask> avait\n",
      "de Benoît Ce n'était pas\n",
      "<mask> Ce n'était pas\n",
      "de Jean C'était\n",
      "<mask> C'était\n",
      "de l'homme dos\n",
      "<mask> dos\n",
      "du garçon lit\n",
      "<mask> lit\n",
      "Benoît  possédait les jouets ?\n",
      "<mask>  possédait les jouets ?\n",
      "Thierry  possédait les jouets ?\n",
      "<mask>  possédait les jouets ?\n",
      "du père Les bras\n",
      "<mask> Les bras\n",
      "du garçon le couffin\n",
      "<mask> le couffin\n",
      "celle de la femme La poitrine\n",
      "<mask> La poitrine\n",
      "celle de la fille La volonté\n",
      "<mask> La volonté\n",
      "le Dr Vincenot pris sa retraite\n",
      "<mask> pris sa retraite\n",
      "Michel un cancer\n",
      "<mask> un cancer\n",
      "Claire n'avait pas\n",
      "<mask> n'avait pas\n",
      "Jeanine avait\n",
      "<mask> avait\n",
      "Jérémy essuyé un refus\n",
      "<mask> essuyé un refus\n",
      "Robert refusé\n",
      "<mask> refusé\n",
      "Kirilov moins\n",
      "<mask> moins\n",
      "Chatoff plus\n",
      "<mask> plus\n",
      "les conseillers municipaux craint\n",
      "<mask> craint\n",
      "les manifestants prône\n",
      "<mask> prône\n",
      "Claire demandé\n",
      "<mask> demandé\n",
      "Suzanne consacré\n",
      "<mask> consacré\n",
      "Sarah réussi\n",
      "<mask> réussi\n",
      "Sabine raté\n",
      "<mask> raté\n",
      "la sculpture lourd\n",
      "<mask> lourd\n",
      "l'étagère encombré\n",
      "<mask> encombré\n",
      "le dessin de Sam  est mis en valeur ?\n",
      "<mask>  est mis en valeur ?\n",
      "le dessin de Tina  est mis en valeur ?\n",
      "<mask>  est mis en valeur ?\n",
      "François acheté\n",
      "<mask> acheté\n",
      "Thomas vendu\n",
      "<mask> vendu\n",
      "Pierre  est le plus brillant ?\n",
      "<mask>  est le plus brillant ?\n",
      "Martin  est le plus brillant ?\n",
      "<mask>  est le plus brillant ?\n",
      "Simon convaincu\n",
      "<mask> convaincu\n",
      "Marc compris\n",
      "<mask> compris\n",
      "le savon retiré\n",
      "<mask> retiré\n",
      "le siphon nettoyé\n",
      "<mask> nettoyé\n",
      "le rendez-vous de courte durée\n",
      "<mask> de courte durée\n",
      "mon train retardé\n",
      "<mask> retardé\n",
      "la pluie  a continué jusqu'à vingt-deux heures ?\n",
      "<mask>  a continué jusqu'à vingt-deux heures ?\n",
      "la séance  a continué jusqu'à vingt-deux heures ?\n",
      "<mask>  a continué jusqu'à vingt-deux heures ?\n",
      "le chiffon au linge sale\n",
      "<mask> au linge sale\n",
      "le couteau dans le tiroir\n",
      "<mask> dans le tiroir\n",
      "Anne  a oublié les horaires de fermeture de la bibliothèque ? \n",
      "<mask>  a oublié les horaires de fermeture de la bibliothèque ? \n",
      "Marie  a oublié les horaires de fermeture de la bibliothèque ? \n",
      "<mask>  a oublié les horaires de fermeture de la bibliothèque ? \n",
      "la carafe lourd\n",
      "<mask> lourd\n",
      "l'étagère haut\n",
      "<mask> haut\n",
      "Pierre gagné\n",
      "<mask> gagné\n",
      "Adam perdu\n",
      "<mask> perdu\n",
      "sur la pelouse trop chaud\n",
      "<mask> trop chaud\n",
      "sous l'arbre plus frais\n",
      "<mask> plus frais\n",
      "Anne mère épanouie\n",
      "<mask> mère épanouie\n",
      "la fille d'Anne enfant adorable\n",
      "<mask> enfant adorable\n",
      "le chien bas\n",
      "<mask> bas\n",
      "le chat haut\n",
      "<mask> haut\n",
      "Jean impressionné\n",
      "<mask> impressionné\n",
      "le jongleur impressionnant\n",
      "<mask> impressionnant\n",
      "Boris faible\n",
      "<mask> faible\n",
      "Carlo inquiet\n",
      "<mask> inquiet\n",
      "Pierre honnête\n",
      "<mask> honnête\n",
      "Marc prudent\n",
      "<mask> prudent\n",
      "le violon possède\n",
      "<mask> possède\n",
      "le morceau aime\n",
      "<mask> aime\n",
      "le livre lira\n",
      "<mask> lira\n",
      "l'article rédigera\n",
      "<mask> rédigera\n",
      "les scientifiques a commencé\n",
      "<mask> a commencé\n",
      "les poissons est apparu\n",
      "<mask> est apparu\n",
      "de Thomas déplacé\n",
      "<mask> déplacé\n",
      "de Raphaël capturé\n",
      "<mask> capturé\n",
      "de Liliane le silence\n",
      "<mask> le silence\n",
      "de Marie la concentration\n",
      "<mask> la concentration\n",
      "Denis compatissant\n",
      "<mask> compatissant\n",
      "Benoît cruel\n",
      "<mask> cruel\n",
      "Emma avait vu que l'autre était démarquée\n",
      "<mask> avait vu que l'autre était démarquée\n",
      "Jeanine était démarquée\n",
      "<mask> était démarquée\n",
      "Le scooter vite\n",
      "<mask> vite\n",
      "Le bus scolaire lentement\n",
      "<mask> lentement\n",
      "Frank  est le vainqueur ? \n",
      "<mask>  est le vainqueur ? \n",
      "Marc  est le vainqueur ? \n",
      "<mask>  est le vainqueur ? \n",
      "l'éponge fer\n",
      "<mask> fer\n",
      "la carafe cristal\n",
      "<mask> cristal\n",
      "Jean petit\n",
      "<mask> petit\n",
      "Benoît grand\n",
      "<mask> grand\n",
      "Anna  a beaucoup révisé ?\n",
      "<mask>  a beaucoup révisé ?\n",
      "Lucy  a beaucoup révisé ?\n",
      "<mask>  a beaucoup révisé ?\n",
      "Les pompiers  venait de plus loin ?\n",
      "<mask>  venait de plus loin ?\n",
      "Les policiers  venait de plus loin ?\n",
      "<mask>  venait de plus loin ?\n",
      "Jérémy  était contrarié ?\n",
      "<mask>  était contrarié ?\n",
      "Kevin  était contrarié ?\n",
      "<mask>  était contrarié ?\n",
      "le sac de pommes de terre  faudra-t-il déplacer en premier ?\n",
      "<mask>  faudra-t-il déplacer en premier ?\n",
      "le sac de farine  faudra-t-il déplacer en premier ?\n",
      "<mask>  faudra-t-il déplacer en premier ?\n",
      "Sylvie curieuse\n",
      "<mask> curieuse\n",
      "Marie bavarde\n",
      "<mask> bavarde\n",
      "Sandrine  l'autre au sujet de l'accident ?\n",
      "<mask>  l'autre au sujet de l'accident ?\n",
      "Anne  l'autre au sujet de l'accident ?\n",
      "<mask>  l'autre au sujet de l'accident ?\n",
      "le frère de Joël moins\n",
      "<mask> moins\n",
      "Joël plus\n",
      "<mask> plus\n",
      "le tableau de la bibliothèque\n",
      "<mask> de la bibliothèque\n",
      "l'arbre d'une maison\n",
      "<mask> d'une maison\n",
      "le portable plus accessible\n",
      "<mask> plus accessible\n",
      "mon sac moins lourd\n",
      "<mask> moins lourd\n",
      "le monument incontournable\n",
      "<mask> incontournable\n",
      "le guide complet\n",
      "<mask> complet\n",
      "la chatte impatiente\n",
      "<mask> impatiente\n",
      "la souris prudente\n",
      "<mask> prudente\n",
      "la clé extirper\n",
      "<mask> extirper\n",
      "la serrure ouvrir\n",
      "<mask> ouvrir\n",
      "le braqueur condamné\n",
      "<mask> condamné\n",
      "le guichetier soigné\n",
      "<mask> soigné\n",
      "Samuel et Amélie jeune\n",
      "<mask> jeune\n",
      "les parents d'Amélie snob\n",
      "<mask> snob\n",
      "les renards téméraire\n",
      "<mask> téméraire\n",
      "les lapins nerveux\n",
      "<mask> nerveux\n",
      "le pull démodé\n",
      "<mask> démodé\n",
      "le gilet beau\n",
      "<mask> beau\n",
      "le têtard  devrait se mettre à l'abri ?\n",
      "<mask>  devrait se mettre à l'abri ?\n",
      "le canard  devrait se mettre à l'abri ?\n",
      "<mask>  devrait se mettre à l'abri ?\n",
      "l'aile de papillon  s'est cassé ?\n",
      "<mask>  s'est cassé ?\n",
      "la table  s'est cassé ?\n",
      "<mask>  s'est cassé ?\n"
     ]
    }
   ],
   "source": [
    "#! make hypothese and masked hypothese\n",
    "#[ hypothese\n",
    "hypotheses = []\n",
    "masked_hypotheses = []\n",
    "\n",
    "for schema in root.findall(\"schema\"):\n",
    "    if schema.attrib['engn'] != \"9999\":\n",
    "        text_debut = schema.find(\".//answer1\").text.lstrip()\n",
    "        text_middle = schema.find(\".//qwordA\").text\n",
    "        if not text_middle:\n",
    "            text_middle = schema.find(\".//qn2\").text\n",
    "        temp = text_middle\n",
    "        # print(text_debut,text_middle)\n",
    "        item_a = text_debut + \" \" + text_middle\n",
    "        item_a_masked = \"<mask>\" + \" \" + text_middle\n",
    "        masked_hypotheses.append(item_a_masked)\n",
    "        hypotheses.append(item_a)\n",
    "        text_debut = schema.find(\".//answer2\").text.lstrip()\n",
    "        text_middle = schema.find(\".//qwordB\").text\n",
    "        if not text_middle:\n",
    "            text_middle = temp\n",
    "        # print(text_debut,text_middle)\n",
    "        item_a = text_debut + \" \" + text_middle\n",
    "        item_a_masked = \"<mask>\" + \" \" + text_middle\n",
    "        masked_hypotheses.append(item_a_masked)\n",
    "        hypotheses.append(item_a)\n",
    "print(len(hypotheses))\n",
    "print(len(masked_hypotheses))\n",
    "for x,y in zip(hypotheses,masked_hypotheses):\n",
    "    print(x,y,sep=\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:46:59.552629Z",
     "start_time": "2021-03-11T17:46:59.538034Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "202\n",
      "202\n",
      "202\n",
      "202\n",
      "202\n",
      "202\n",
      "202\n",
      "202\n",
      "202\n",
      "202\n"
     ]
    }
   ],
   "source": [
    "#[ add masked text\n",
    "# read use_reunion10\n",
    "masked_texts = pd.read_csv(data_dir+\"use_reunion10.csv\",sep=\";\")\n",
    "masked_texts = masked_texts.masked.tolist()\n",
    "type(masked_texts)#%%\n",
    "\n",
    "#[ add correct answer head\n",
    "# read use_reunion10\n",
    "df_bert = pd.read_csv(data_dir+\"use_reunion10.csv\",sep=\";\")\n",
    "correct_answer_heads = df_bert.answer.tolist()\n",
    "options = df_bert.options.tolist()\n",
    "schemas =  df_bert.id_schema.tolist()\n",
    "corre_answer_heads = []\n",
    "wrong_answer_heads = []\n",
    "maske_texts = []\n",
    "for i,ans in enumerate(correct_answer_heads):\n",
    "    if schemas[i] not in [29,39,40,56,82,96]:\n",
    "        option = options[i]\n",
    "        wrong_answer = option.replace(ans,\"\").strip()\n",
    "        wrong_answer_heads.append(wrong_answer)\n",
    "        corre_answer_heads.append(option)\n",
    "        maske_texts.append(masked_texts[i])\n",
    "masked_texts = maske_texts\n",
    "correct_answer_heads = corre_answer_heads\n",
    "print(len(correct_answer_heads))\n",
    "print(len(wrong_answer_heads))\n",
    "print(len(double_ids))\n",
    "print(len(double_french_schema_ids))\n",
    "print(len(questions))\n",
    "print(len(answers))\n",
    "print(len(items))\n",
    "print(len(hypotheses))\n",
    "print(len(masked_hypotheses))\n",
    "print(len(masked_texts))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-11T17:47:01.469094Z",
     "start_time": "2021-03-11T17:47:01.451180Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "202"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#! probleme a regler sur les conseillers et pas que\n",
    "# build the first final version\n",
    "dt_df = {\"id\":double_ids,\"french_schema_no\": double_french_schema_ids,\"question\":questions,\"correct_answer_head\":correct_answer_heads,\n",
    "         \"wrong_answer_head\":wrong_answer_heads,\n",
    "         \"correct_answer\":answers,\"text\":items,\"wrong_answer\":wrong_answers,\"hypothesis\":hypotheses,\"masked_hypothesis\":masked_hypotheses,\"masked_text\":masked_texts}\n",
    "df = pd.DataFrame(dt_df)\n",
    "df.shape\n",
    "df = df[[\"id\",\"text\",\"masked_text\",\"question\",\"hypothesis\",\"masked_hypothesis\",\"correct_answer\",\"wrong_answer\",\"correct_answer_head\",\"wrong_answer_head\",\"french_schema_no\"]]\n",
    "df.head()\n",
    "xo_write_json(data_dir+\"winofr_final_v2.json\",df)\n",
    "final1 = xo_read_json(data_dir+\"winofr_final_v2.json\")\n",
    "#[ reorder the ids\n",
    "final2 = sorted(final1, key= lambda x: x[\"id\"])\n",
    "final2\n",
    "#[ keep only the ones in wsc273\n",
    "final3 = [x for x in final2 if x[\"correct_answer\"] in [\"les conseillers municipaux\",\"les manifestants\"] or x[\"id\"] != 0]\n",
    "# final3\n",
    "# final3 = [x for x in final3 if x[\"text\"] == \"Les conseillers municipaux ont refusé une autorisation aux manifestants, car ils craignent la violence. \" or x[\"id\"] != 1]\n",
    "# final3\n",
    "# #[ some cleanning\n",
    "for it in final3:\n",
    "    it[\"text\"] = it[\"text\"].strip()\n",
    "    it[\"question\"] = it[\"question\"].strip()\n",
    "    it[\"correct_answer\"] = it[\"correct_answer\"].strip()\n",
    "final3\n",
    "xo_write_json(data_dir+\"winofr_final_v3.json\",df)\n",
    "len(final3) #202"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "pycharm": {
     "name": "#%%"
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (myenv)",
   "language": "python",
   "name": "myenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "nbTranslate": {
   "displayLangs": [
    "*"
   ],
   "hotkey": "alt-t",
   "langInMainMenu": true,
   "sourceLang": "en",
   "targetLang": "fr",
   "useGoogleTranslate": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": false,
   "skip_h1_title": true,
   "title_cell": "Table des matières",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}