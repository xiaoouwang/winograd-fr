{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Add pmi-able informations\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os,sys,inspect\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import importlib\n",
    "import sys\n",
    "from utils_xo import *\n",
    "importlib.reload(sys.modules[\"utils_xo\"])\n",
    "from utils_xo import *\n",
    "pd.set_option('display.max_colwidth', None)\n",
    "# set data directory\n",
    "data_dir = r\"../../../data/french/\"\n",
    "import xml.etree.ElementTree as ET\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "outputs": [],
   "source": [
    "pmi_able = xo_read_json(data_dir+\"pmi_frwac_alt_corrected.json\")\n",
    "no_pmi = xo_read_json(data_dir+\"winofr_final_v3.json\")\n",
    "no_pmi\n",
    "pmiable_schemas = []\n",
    "for it in no_pmi:\n",
    "    fr_id = it[\"french_schema_no\"]\n",
    "    for x in pmi_able:\n",
    "        if int(x[\"schema\"]) == fr_id:\n",
    "            pmiable_schemas.append(fr_id)\n",
    "# -29 82 96  91 - 3 schemas  = 88*2 176 items"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "outputs": [
    {
     "data": {
      "text/plain": "176"
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(pmiable_schemas) # from 178 to 176"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "outputs": [],
   "source": [
    "#! construct lists of r0 r1 special alternate pmi_able\n",
    "#* 1 schema = 2 items = 4 pairs, 2 pairs for each item\n",
    "special_pairs = []\n",
    "alternate_pairs = []\n",
    "\n",
    "for i in pmiable_schemas:\n",
    "    for it in pmi_able:\n",
    "        if int(it[\"schema\"]) == i:\n",
    "            special_pairs.append((i,it[\"special\"]+\"|\"+it[\"r0\"], it[\"special\"]+\"|\"+it[\"r1\"]))\n",
    "            alternate_pairs.append((i,it[\"alternate\"]+\"|\"+it[\"r0\"], it[\"alternate\"]+\"|\"+it[\"r1\"]))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "outputs": [],
   "source": [
    "# special_pairs"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "outputs": [],
   "source": [
    "all_pairs = []\n",
    "for x,y in zip(special_pairs,alternate_pairs):\n",
    "    all_pairs.append(x)\n",
    "    all_pairs.append(y)\n",
    "# all_pairs"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "outputs": [],
   "source": [
    "half_pairs = []\n",
    "len_pairs = len(all_pairs)\n",
    "len_pairs\n",
    "first = list(range(0,len_pairs,4))\n",
    "second = list(range(1,len_pairs,4))\n",
    "for x,y in zip(first,second):\n",
    "    half_pairs.append(all_pairs[x])\n",
    "    half_pairs.append(all_pairs[y])\n",
    "# half_pairs\n",
    "# 0,4,8\n",
    "# 1,5,9"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "temp = defaultdict(list)\n",
    "for i,it in enumerate(no_pmi):\n",
    "    # get schema id\n",
    "    schema_id = it[\"french_schema_no\"]\n",
    "    # get pairs in all_pairs\n",
    "    for j in half_pairs:\n",
    "        if j[0] == schema_id:\n",
    "            temp[schema_id].append(j[1:])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "outputs": [],
   "source": [
    "# temp"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "outputs": [],
   "source": [
    "log = 1\n",
    "for i,it in enumerate(no_pmi):\n",
    "    schema = it[\"french_schema_no\"]\n",
    "    if schema in temp and log == 1:\n",
    "        it[\"pmi_able\"] = 1\n",
    "        it[\"question_right\"] = temp[schema][0][0]\n",
    "        it[\"question_wrong\"] = temp[schema][0][1]\n",
    "        log = 2\n",
    "    elif schema in temp and log != 1:\n",
    "        it[\"pmi_able\"] = 1\n",
    "        it[\"question_right\"] = temp[schema][1][0]\n",
    "        it[\"question_wrong\"] = temp[schema][1][1]\n",
    "        log = 1"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "outputs": [],
   "source": [
    "for it in no_pmi:\n",
    "    # print(it[\"pmi_able\"])\n",
    "    if it[\"pmi_able\"] == 0:\n",
    "        it[\"question_right\"] = \"\"\n",
    "        it[\"question_wrong\"] = \"\""
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "outputs": [],
   "source": [
    "import re\n",
    "#! make hypothesis\n",
    "for it in no_pmi:\n",
    "    try:\n",
    "        it[\"hypothesis\"] = re.split(r\",|;|\\?\",it[\"masked_text\"])[1].replace(\"<mask>\",it[\"correct_answer_head\"]).strip()\n",
    "    except:\n",
    "        it[\"hypothesis\"] = it[\"masked_text\"].replace(\"<mask>\",it[\"correct_answer_head\"]).strip()\n",
    "for it in no_pmi:\n",
    "    try:\n",
    "        it[\"masked_hypothesis\"] = re.split(r\",|;|\\?\",it[\"masked_text\"])[1].strip()\n",
    "    except:\n",
    "        it[\"masked_hypothesis\"] = it[\"masked_text\"].replace(\"<mask>\",it[\"correct_answer_head\"]).strip()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "outputs": [],
   "source": [
    "no_pmi = sorted(no_pmi,key= lambda x: x[\"id\"])\n",
    "# remove the no_contexte\n",
    "xo_write_json_fromlist(data_dir+\"v4.json\",no_pmi)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "outputs": [],
   "source": [
    "df = pd.read_json(data_dir+\"v4.json\")\n",
    "df.drop(columns=[\"no_contexte\"],inplace=True)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "outputs": [],
   "source": [
    "df\n",
    "# xo_write_json(data_dir+\"v5.json\",df)\n",
    "#! the manuel correction phase going on"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# add english\n",
    "df = pd.read_json(data_dir+\"v5.json\")\n",
    "df_eng = pd.read_json(\"../../../data/english/wino285.json\")\n",
    "# for i,row in df.iterrows():\n",
    "#     if\n",
    "id = list(range(285))\n",
    "id = [x+1 for x in id]\n",
    "id\n",
    "df_eng[\"id\"] = id\n",
    "df_eng = df_eng[[\"id\",\"text\"]]\n",
    "df_eng_ids = df_eng[\"id\"].tolist()\n",
    "df_eng_text = df_eng[\"text\"].tolist()\n",
    "df_eng_dict = {x:y for x,y in zip(df_eng_ids,df_eng_text)}\n",
    "df_eng_dict\n",
    "df_ids = df[\"id\"].tolist()\n",
    "for i,row in df.iterrows():\n",
    "    df.loc[i,\"english_text\"] = df_eng_dict[row[\"id\"]]\n",
    "df = df[['id','english_text','text', 'masked_text_bert', 'question', 'hypothesis',\n",
    "       'masked_hypothesis_bert', 'correct_answer', 'wrong_answer',\n",
    "       'correct_answer_bert', 'wrong_answer_bert', 'french_schema_no',\n",
    "       'pmi_able', 'question_right_lemma', 'question_wrong_lemma']]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "outputs": [],
   "source": [
    "# xo_write_json(data_dir+\"v5.json\",df)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "#!make hypothese and masked hypothese first letter uppercase\n",
    "#! start here  2021-03-12, ignore above"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "name": "base",
   "language": "python",
   "display_name": "Python 3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}